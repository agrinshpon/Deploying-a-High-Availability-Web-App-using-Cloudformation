Description: >
    Servers, security groups, IAM, and load balancing architecture

Parameters:

    EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String

    MinServer:
      Description: Minimum number of servers for application
      Type: 'String'

    MaxServer:
      Description: Maximum number of servers for application
      Type: 'String'

    DesiredServer:
      Description: Desired number of servers for application
      Type: 'String'

    LBInstanceType:
      Description: Instance type for load balancer
      Type: 'String'

    LBVolumeSize:
      Description: Volume Size for load balancer
      Type: 'String'

    BastionKeyPair:
      Description: Key pair for bastion hosts that was created through the console
      Type: 'AWS::EC2::KeyPair::KeyName'

Resources:

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  BastionSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion host security groups
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  BastionHostPublicSubnet1:
    Type: AWS::EC2::Instance
    DependsOn: BastionSecGroup
    Properties:
      ImageId: ami-06f2f779464715dc5
      InstanceType: t2.micro
      KeyName: !Ref BastionKeyPair
      SubnetId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-PUB1-SN"
#      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      SecurityGroupIds:
      - Ref: BastionSecGroup

  BastionHostPublicSubnet2:
    Type: AWS::EC2::Instance
    DependsOn: BastionSecGroup
    Properties:
      ImageId: ami-06f2f779464715dc5
      InstanceType: t2.micro
      KeyName: !Ref BastionKeyPair
      SubnetId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-PUB2-SN"
#      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      SecurityGroupIds:
      - Ref: BastionSecGroup

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          apt update -y
          apt install -y apache2
          systemctl start apache2
          systemctl enable apache2
          rm ../../var/www/html/index.html
          wget -P ../../var/www/html https://udacity-project-2.s3-us-west-2.amazonaws.com/index.html
      ImageId: ami-005bdb005fb00e791
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: !Ref LBInstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: !Ref LBVolumeSize

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: !Ref MinServer
      MaxSize: !Ref MaxServer
      DesiredCapacity: !Ref DesiredServer
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  S3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  S3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3Policy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
            - s3:*
          Resource: "*"
      Roles:
      - Ref: S3Role

  S3InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: S3Role

Outputs:

  BastionHostPublicSubnet1IP:
    Description: Bastion Host 1 public IP
    Value: !GetAtt BastionHostPublicSubnet1.PublicIp
    Export:
      Name: !Sub "${EnvironmentName}-BASTION-HOST-IP-PUB1-SN"

  BastionHostPublicSubnet2IP:
    Description: Bastion Host 2 public IP
    Value: !GetAtt BastionHostPublicSubnet2.PublicIp
    Export:
      Name: !Sub "${EnvironmentName}-BASTION-HOST-IP-PUB2-SN"

  LoadBalancerDNSName:
    Description: DNS Name of the web application
    Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ] ]
    Export:
      Name: !Sub "${EnvironmentName}-LB-DNS-NAME"
